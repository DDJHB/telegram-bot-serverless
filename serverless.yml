org: ddakib
app: telegram-bot-handler
service: carpooling-telegram-bot


custom:
  pythonRequirements:
     dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.9
  architecture: arm64
  stage: dev
  region: us-east-1
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action: 'dynamodb:*'
      Resource: '*'
  environment:
    TELEGRAM_TOKEN: ${env:BOT_TOKEN}
    ALCHEMY_API_URL: ${env:ALCHEMY_API_URL}
    WALLET_PRIVATE_KEY: ${env:WALLET_PRIVATE_KEY}
    SMART_CONTRACT_ADDRESS: ${env:SMART_CONTRACT_ADDRESS}
    WALLET_ADDRESS: ${env:WALLET_ADDRESS}

package:
  patterns:
    - '!.venv'
    - '!.gitignore'

functions:
  handle_user_message:
    handler: src.message_handler.handler
    events:
      - http:
          path: my-first-test
          method: post
          cors: true

  handle_transaction_event_emitted:
    handler: src.ts_event_handler.handler
    events:
      - http:
          path: /smart-contract/event
          method: post
          cors: true

plugins:
  - serverless-python-requirements

resources:
  Resources:
    EthereumTransactionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ethereum-transactions-table
        AttributeDefinitions:
          - AttributeName: pk   # tx_hash
            AttributeType: S
          - AttributeName: gsi1_pk   # chat_id
            AttributeType: N
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
              - AttributeName: gsi1_pk
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST
